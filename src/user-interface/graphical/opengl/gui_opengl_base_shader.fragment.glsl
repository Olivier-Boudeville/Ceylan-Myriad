/*
 * This is the MyriadGUI base, built-in fragment shader.
 *
 * Each fragment shader instance is to transform exactly one fragment (as
 * generated by the rasterization) into another that is based on a series of
 * colors and a single depth value.
 *
 * At least generally, this transformation should behave as a pure
 * (context-free) function.
 *
 * Refer to https://www.khronos.org/opengl/wiki/Fragment_Shader for more
 * information.
 *
 */


/*
 * The GLSL version now matches the one of OpenGL (3.3);
 * using the (default) core profile.
 *
 */
#version 330 core

// MyriadGUI base shader defines:
#include "gui_shader.glsl.h"


// Not needed here:
//uniform uint myriad_gui_vbo_layout;

/* Just defined to test the uniform support (will not be found if not explicitly
 * used afterwards):
 *
 */
//uniform vec3 some_uniform_color;

// Would require the GL_ARB_separate_shader_objects extension:
//layout (location = 2) in vec3 myriad_gui_input_color;


// Input of this shader (output of the vertex shader):
in vec3 myriad_gui_current_color;


/* User-defined output data, as three floating-point coordinates in [0.0, 1.0]
 * (see gui_color:render_rgb_color(); alpha of 1.0 implied) for the fragment of
 * interest; no layout specified here:
 *
 */
out vec3 myriad_gui_output_color;



void main()
{

	// For all fragments, the output color will be pure green:
	//myriad_gui_output_color = vec3(0.0, 1.0, 0.0);

	// For all fragments, the output color will be set by the test application:
	//myriad_gui_output_color = some_uniform_color;

	myriad_gui_output_color = myriad_gui_current_color;

}